image:
  name: "python:3.11-alpine"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - push
  - deploy


before_script:
- docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

after_script:
- docker logout "$CI_REGISTRY"

.do_testing:
  stage: test
  allow_failure: false
  script:
    - python3 -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest
    - python3 -m pytest

test:predict:
  before_script:
    - echo "$CI_REGISTRY_IMAGE"
    - echo $CI_REGISTRY
    - cd ml/predict/
    - ls
    - if [ -d "env_predict/bin/activate" ]; then rm -Rf $WORKING_DIR; fi
    - python3.9 -m venv env_predict
    - source env_predict/bin/activate
  variables:
    IMAGE_NAME: nyt_news-prediction
  extends: .do_testing

#build:
#  stage: build
#  before_script:
#    - echo "$CI_REGISTRY_IMAGE"
#    - echo $CI_REGISTRY
#  script:
#    - docker-compose build --pull
#
#
#.template: &push_image
#  needs: ["build"]
#  before_script:
#    - echo "$CI_REGISTRY_IMAGE"
#    # Tag the container image from latest to the commit ref
#    - docker tag "$CI_REGISTRY_IMAGE/$IMAGE_NAME:latest" "$CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
#  script:
#    # Push the container image
#    - docker push "$CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
#    # If we are building a tag, push the `latest` container image tag too
#    - if [ ! -z "$CI_COMMIT_TAG" ]; then docker push "$CI_REGISTRY_IMAGE/$IMAGE_NAME:latest"; fi
#
#push:predict:
#  <<: *push_image
#  stage: push
#  variables:
#    IMAGE_NAME: nyt_news-prediction
#
#
#deploy:
#  stage: deploy
#  script:
#  - docker-compose pull
#  - docker-compose up -d